// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A ou C
    Not(in=instruction[15], out=instructionA);
    Not(in=instructionA, out=instructionC);
    
    And(a=instructionC, b=instruction[5], out=ULAxA);
    Mux16(a=instruction, b=ALUout, sel=ULAxA, out=inA);
    
    Or(a=instructionA, b=ULAxA, out=loadA);
    ARegister(in=inA, load=loadA, out=outRegisterA);
    
    Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=AxULA);

    And(a=instructionC, b=instruction[4], out=loadC);
    DRegister(in=ALUout, load=loadC, out=CxULA);
    
    //ULA
    ALU(x=CxULA, y=AxULA, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);
        
    //Endereço de memória
    Or16(a=false, b=outRegisterA, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=instructionC, b=instruction[3], out=writeM);
    
    // incPC, loadPC e loadA
    And(a=ZRout, b=instruction[1], out=JEQ);    // is zero and jump if zero
    And(a=NGout, b=instruction[2], out=JLT);    // is neg and jump if neg
    Or(a=ZRout, b=NGout, out=zeroOUnegativo);
    Not(in=zeroOUnegativo, out=positivo);            // is positive (not zero and not neg)
    And(a=positivo, b=instruction[0], out=JGT); // is pos and jump if pos
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jumpA);              // load PC if cond met and jump if cond
    And(a=instructionC, b=jumpA, out=loadPC); // Only jump if C instruction
    Not(in=loadPC, out=incPC);                  // only inc if not load
    PC(in=outRegisterA, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
    }